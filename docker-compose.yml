version: '3.8'

services:
  # ----------------------------------------------------------------
  # Infrastructure Services
  # ----------------------------------------------------------------
  postgres:
    image: timescale/timescaledb:latest-pg14
    container_name: quantumalpha-postgres
    environment:
      POSTGRES_USER: ${DB_USER:-quantumalpha_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-quantumalpha_pass}
      POSTGRES_DB: ${DB_NAME:-quantumalpha_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Assuming an init-db script exists to set up schema/initial data
      # - ./scripts/init-db:/docker-entrypoint-initdb.d
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - quantumalpha-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: quantumalpha-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - quantumalpha-network
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: quantumalpha-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - quantumalpha-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: quantumalpha-kafka
    depends_on:
      zookeeper:
        condition: service_started
    ports:
      - "${KAFKA_PORT:-9092}:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - quantumalpha-network
    restart: unless-stopped

  # ----------------------------------------------------------------
  # Backend Microservices (Using the shared Dockerfile with build args)
  # ----------------------------------------------------------------
  data-service:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: data_service
    container_name: quantumalpha-data-service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      DB_HOST: postgres
      REDIS_HOST: redis
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SERVICE_PORT: 8001
      # Inherit other DB/Redis/Kafka env vars from docker-compose environment or defaults
    ports:
      - "8001:8001"
    networks:
      - quantumalpha-network
    restart: unless-stopped
    command: ["python", "-m", "data_service.app"]

  ai-engine:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: ai_engine
    container_name: quantumalpha-ai-engine
    depends_on:
      data-service:
        condition: service_started
    environment:
      DB_HOST: postgres
      REDIS_HOST: redis
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      DATA_SERVICE_HOST: data-service
      SERVICE_PORT: 8002
    ports:
      - "8002:8002"
    volumes:
      - ai_engine_models:/app/ai_engine/models
    networks:
      - quantumalpha-network
    restart: unless-stopped
    command: ["python", "-m", "ai_engine.app"]

  risk-service:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: risk_service
    container_name: quantumalpha-risk-service
    depends_on:
      ai-engine:
        condition: service_started
    environment:
      DB_HOST: postgres
      REDIS_HOST: redis
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      DATA_SERVICE_HOST: data-service
      AI_ENGINE_HOST: ai-engine
      SERVICE_PORT: 8003
    ports:
      - "8003:8003"
    networks:
      - quantumalpha-network
    restart: unless-stopped
    command: ["python", "-m", "risk_service.app"]

  execution-service:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: execution_service
    container_name: quantumalpha-execution-service
    depends_on:
      risk-service:
        condition: service_started
    environment:
      DB_HOST: postgres
      REDIS_HOST: redis
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      DATA_SERVICE_HOST: data-service
      AI_ENGINE_HOST: ai-engine
      RISK_SERVICE_HOST: risk-service
      SERVICE_PORT: 8004
    ports:
      - "8004:8004"
    networks:
      - quantumalpha-network
    restart: unless-stopped
    command: ["python", "-m", "execution_service.app"]

  analytics-service:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: analytics_service
    container_name: quantumalpha-analytics-service
    depends_on:
      data-service:
        condition: service_started
    environment:
      DB_HOST: postgres
      REDIS_HOST: redis
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      DATA_SERVICE_HOST: data-service
      SERVICE_PORT: 8005
    ports:
      - "8005:8005"
    networks:
      - quantumalpha-network
    restart: unless-stopped
    command: ["python", "-m", "analytics_service.app"]

  compliance-service:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: compliance_service
    container_name: quantumalpha-compliance-service
    depends_on:
      data-service:
        condition: service_started
    environment:
      DB_HOST: postgres
      REDIS_HOST: redis
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      DATA_SERVICE_HOST: data-service
      SERVICE_PORT: 8006
    ports:
      - "8006:8006"
    networks:
      - quantumalpha-network
    restart: unless-stopped
    command: ["python", "-m", "compliance_service.app"]

  api-gateway:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: api_gateway
    container_name: quantumalpha-api-gateway
    depends_on:
      execution-service:
        condition: service_started
      analytics-service:
        condition: service_started
      compliance-service:
        condition: service_started
    environment:
      SERVICE_PORT: 8080
      # All other service hosts are implicitly available via the network
    ports:
      - "8080:8080"
    networks:
      - quantumalpha-network
    restart: unless-stopped
    command: ["python", "-m", "api_gateway.app"]

  # ----------------------------------------------------------------
  # Frontend Applications
  # ----------------------------------------------------------------
  web-frontend:
    build:
      context: ./web-frontend
      dockerfile: Dockerfile
    container_name: quantumalpha-web-frontend
    depends_on:
      api-gateway:
        condition: service_started
    environment:
      # Vite uses VITE_ prefix for environment variables
      VITE_API_BASE_URL: http://api-gateway:8080
    ports:
      - "3000:3000"
    networks:
      - quantumalpha-network
    restart: unless-stopped
    # Assuming a simple Dockerfile that runs `npm run dev` or serves the build
    # For production, a multi-stage build with a final nginx/serve stage would be better
    command: ["npm", "run", "dev", "--", "--host"]

  # ----------------------------------------------------------------
  # Monitoring Stack
  # ----------------------------------------------------------------
  prometheus:
    image: prom/prometheus:v2.42.0
    container_name: quantumalpha-prometheus
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    networks:
      - quantumalpha-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:9.4.7
    container_name: quantumalpha-grafana
    depends_on:
      prometheus:
        condition: service_started
    ports:
      - "3001:3000" # Expose on 3001 to avoid conflict with web-frontend on 3000
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - quantumalpha-network
    restart: unless-stopped

# ----------------------------------------------------------------
# Volumes and Networks
# ----------------------------------------------------------------
volumes:
  postgres_data:
  redis_data:
  ai_engine_models:
  prometheus_data:
  grafana_data:

networks:
  quantumalpha-network:
    driver: bridge

