version: '3.8'

services:
  # Database services
  postgres:
    image: timescale/timescaledb:latest-pg14
    container_name: quantumalpha-postgres
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-quantumalpha}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db:/docker-entrypoint-initdb.d
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - quantumalpha-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: quantumalpha-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - quantumalpha-network
    restart: unless-stopped

  # Kafka services
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: quantumalpha-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_log:/var/lib/zookeeper/log
    networks:
      - quantumalpha-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: quantumalpha-kafka
    depends_on:
      - zookeeper
    ports:
      - "${KAFKA_PORT:-9092}:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - quantumalpha-network
    restart: unless-stopped

  # Application services
  data-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: data_service
    container_name: quantumalpha-data-service
    depends_on:
      - postgres
      - redis
      - kafka
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_NAME=${DB_NAME:-quantumalpha}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - SERVICE_PORT=${DATA_SERVICE_PORT:-8001}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-secret}
    ports:
      - "${DATA_SERVICE_PORT:-8001}:8001"
    volumes:
      - ./data_service:/app/data_service
      - ./common:/app/common
      - ./config:/app/config
    networks:
      - quantumalpha-network
    restart: unless-stopped
    command: ["python", "-m", "data_service.app"]

  ai-engine:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: ai_engine
    container_name: quantumalpha-ai-engine
    depends_on:
      - postgres
      - redis
      - kafka
      - data-service
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_NAME=${DB_NAME:-quantumalpha}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - DATA_SERVICE_HOST=data-service
      - DATA_SERVICE_PORT=8001
      - SERVICE_PORT=${AI_ENGINE_PORT:-8002}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-secret}
    ports:
      - "${AI_ENGINE_PORT:-8002}:8002"
    volumes:
      - ./ai_engine:/app/ai_engine
      - ./common:/app/common
      - ./config:/app/config
      - ai_engine_models:/app/models
    networks:
      - quantumalpha-network
    restart: unless-stopped
    command: ["python", "-m", "ai_engine.app"]

  risk-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: risk_service
    container_name: quantumalpha-risk-service
    depends_on:
      - postgres
      - redis
      - kafka
      - data-service
      - ai-engine
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_NAME=${DB_NAME:-quantumalpha}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - DATA_SERVICE_HOST=data-service
      - DATA_SERVICE_PORT=8001
      - AI_ENGINE_HOST=ai-engine
      - AI_ENGINE_PORT=8002
      - SERVICE_PORT=${RISK_SERVICE_PORT:-8003}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-secret}
    ports:
      - "${RISK_SERVICE_PORT:-8003}:8003"
    volumes:
      - ./risk_service:/app/risk_service
      - ./common:/app/common
      - ./config:/app/config
    networks:
      - quantumalpha-network
    restart: unless-stopped
    command: ["python", "-m", "risk_service.app"]

  execution-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: execution_service
    container_name: quantumalpha-execution-service
    depends_on:
      - postgres
      - redis
      - kafka
      - data-service
      - ai-engine
      - risk-service
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_NAME=${DB_NAME:-quantumalpha}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - DATA_SERVICE_HOST=data-service
      - DATA_SERVICE_PORT=8001
      - AI_ENGINE_HOST=ai-engine
      - AI_ENGINE_PORT=8002
      - RISK_SERVICE_HOST=risk-service
      - RISK_SERVICE_PORT=8003
      - SERVICE_PORT=${EXECUTION_SERVICE_PORT:-8004}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-secret}
    ports:
      - "${EXECUTION_SERVICE_PORT:-8004}:8004"
    volumes:
      - ./execution_service:/app/execution_service
      - ./common:/app/common
      - ./config:/app/config
    networks:
      - quantumalpha-network
    restart: unless-stopped
    command: ["python", "-m", "execution_service.app"]

  # Monitoring services (optional)
  prometheus:
    image: prom/prometheus:v2.42.0
    container_name: quantumalpha-prometheus
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    networks:
      - quantumalpha-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:9.4.7
    container_name: quantumalpha-grafana
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - quantumalpha-network
    restart: unless-stopped

networks:
  quantumalpha-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  zookeeper_data:
  zookeeper_log:
  kafka_data:
  ai_engine_models:
  prometheus_data:
  grafana_data:

