# QuantumAlpha Logging Configuration

# Default Configuration
default:
  version: 1
  disable_existing_loggers: false
  formatters:
    standard:
      format: "%(asctime)s [%(levelname)s] %(name)s: %(message)s"
      datefmt: "%Y-%m-%d %H:%M:%S"
    json:
      class: pythonjsonlogger.jsonlogger.JsonFormatter
      format: "%(asctime)s %(name)s %(levelname)s %(message)s %(filename)s %(funcName)s %(lineno)d %(process)d %(thread)d %(threadName)s"
  handlers:
    console:
      class: logging.StreamHandler
      level: INFO
      formatter: standard
      stream: ext://sys.stdout
    file:
      class: logging.handlers.RotatingFileHandler
      level: INFO
      formatter: standard
      filename: /var/log/quantumalpha/app.log
      maxBytes: 10485760  # 10MB
      backupCount: 10
    error_file:
      class: logging.handlers.RotatingFileHandler
      level: ERROR
      formatter: standard
      filename: /var/log/quantumalpha/error.log
      maxBytes: 10485760  # 10MB
      backupCount: 10
  loggers:
    "":  # root logger
      level: INFO
      handlers: [console, file, error_file]
      propagate: true
    quantumalpha:
      level: INFO
      handlers: [console, file, error_file]
      propagate: false
    sqlalchemy.engine:
      level: WARNING
      handlers: [console, file]
      propagate: false
    urllib3:
      level: WARNING
      handlers: [console]
      propagate: false

# Development Environment
development:
  version: 1
  disable_existing_loggers: false
  formatters:
    standard:
      format: "%(asctime)s [%(levelname)s] %(name)s: %(message)s"
      datefmt: "%Y-%m-%d %H:%M:%S"
    detailed:
      format: "%(asctime)s [%(levelname)s] %(name)s:%(filename)s:%(lineno)d - %(message)s"
      datefmt: "%Y-%m-%d %H:%M:%S"
  handlers:
    console:
      class: logging.StreamHandler
      level: DEBUG
      formatter: detailed
      stream: ext://sys.stdout
    file:
      class: logging.handlers.RotatingFileHandler
      level: DEBUG
      formatter: detailed
      filename: /var/log/quantumalpha/app.log
      maxBytes: 10485760  # 10MB
      backupCount: 5
  loggers:
    "":  # root logger
      level: INFO
      handlers: [console, file]
      propagate: true
    quantumalpha:
      level: DEBUG
      handlers: [console, file]
      propagate: false
    sqlalchemy.engine:
      level: INFO
      handlers: [console, file]
      propagate: false
    urllib3:
      level: INFO
      handlers: [console]
      propagate: false

# Staging Environment
staging:
  version: 1
  disable_existing_loggers: false
  formatters:
    standard:
      format: "%(asctime)s [%(levelname)s] %(name)s: %(message)s"
      datefmt: "%Y-%m-%d %H:%M:%S"
    json:
      class: pythonjsonlogger.jsonlogger.JsonFormatter
      format: "%(asctime)s %(name)s %(levelname)s %(message)s %(filename)s %(funcName)s %(lineno)d %(process)d %(thread)d %(threadName)s"
  handlers:
    console:
      class: logging.StreamHandler
      level: INFO
      formatter: json
      stream: ext://sys.stdout
    file:
      class: logging.handlers.TimedRotatingFileHandler
      level: INFO
      formatter: json
      filename: /var/log/quantumalpha/app.log
      when: midnight
      interval: 1
      backupCount: 14
    error_file:
      class: logging.handlers.TimedRotatingFileHandler
      level: ERROR
      formatter: json
      filename: /var/log/quantumalpha/error.log
      when: midnight
      interval: 1
      backupCount: 30
  loggers:
    "":  # root logger
      level: INFO
      handlers: [console, file, error_file]
      propagate: true
    quantumalpha:
      level: INFO
      handlers: [console, file, error_file]
      propagate: false
    sqlalchemy.engine:
      level: WARNING
      handlers: [file]
      propagate: false
    urllib3:
      level: WARNING
      handlers: [file]
      propagate: false

# Production Environment
production:
  version: 1
  disable_existing_loggers: false
  formatters:
    json:
      class: pythonjsonlogger.jsonlogger.JsonFormatter
      format: "%(asctime)s %(name)s %(levelname)s %(message)s %(filename)s %(funcName)s %(lineno)d %(process)d %(thread)d %(threadName)s"
  handlers:
    console:
      class: logging.StreamHandler
      level: WARNING
      formatter: json
      stream: ext://sys.stdout
    file:
      class: logging.handlers.TimedRotatingFileHandler
      level: INFO
      formatter: json
      filename: /var/log/quantumalpha/app.log
      when: midnight
      interval: 1
      backupCount: 30
    error_file:
      class: logging.handlers.TimedRotatingFileHandler
      level: ERROR
      formatter: json
      filename: /var/log/quantumalpha/error.log
      when: midnight
      interval: 1
      backupCount: 90
    critical_file:
      class: logging.handlers.TimedRotatingFileHandler
      level: CRITICAL
      formatter: json
      filename: /var/log/quantumalpha/critical.log
      when: midnight
      interval: 1
      backupCount: 365
  loggers:
    "":  # root logger
      level: WARNING
      handlers: [console, file, error_file]
      propagate: true
    quantumalpha:
      level: INFO
      handlers: [file, error_file, critical_file]
      propagate: false
    quantumalpha.api:
      level: INFO
      handlers: [file, error_file]
      propagate: false
    quantumalpha.core:
      level: INFO
      handlers: [file, error_file, critical_file]
      propagate: false
    sqlalchemy.engine:
      level: WARNING
      handlers: [file, error_file]
      propagate: false
    urllib3:
      level: WARNING
      handlers: [file]
      propagate: false

# Service-Specific Configurations
services:
  data_service:
    loggers:
      quantumalpha.data_service:
        level: INFO
        handlers: [file, error_file]
        propagate: false
      quantumalpha.data_service.market_data:
        level: INFO
        handlers: [file]
        propagate: false
      quantumalpha.data_service.alternative_data:
        level: INFO
        handlers: [file]
        propagate: false
  
  ai_engine:
    loggers:
      quantumalpha.ai_engine:
        level: INFO
        handlers: [file, error_file]
        propagate: false
      quantumalpha.ai_engine.model_training:
        level: INFO
        handlers: [file]
        propagate: false
      quantumalpha.ai_engine.prediction:
        level: INFO
        handlers: [file, error_file]
        propagate: false
  
  risk_service:
    loggers:
      quantumalpha.risk_service:
        level: INFO
        handlers: [file, error_file]
        propagate: false
      quantumalpha.risk_service.position_sizing:
        level: INFO
        handlers: [file, error_file]
        propagate: false
      quantumalpha.risk_service.stress_testing:
        level: INFO
        handlers: [file]
        propagate: false
  
  execution_service:
    loggers:
      quantumalpha.execution_service:
        level: INFO
        handlers: [file, error_file, critical_file]
        propagate: false
      quantumalpha.execution_service.order_manager:
        level: INFO
        handlers: [file, error_file, critical_file]
        propagate: false
      quantumalpha.execution_service.broker_integration:
        level: INFO
        handlers: [file, error_file, critical_file]
        propagate: false

