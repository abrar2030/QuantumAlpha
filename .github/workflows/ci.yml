name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

jobs:
  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10']
        node-version: ['16.x']

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

    - name: Install Node.js dependencies
      run: |
        cd web-frontend
        npm ci
        cd ../mobile-frontend
        npm ci

    - name: Lint Python code
      run: |
        flake8 backend/ tests/
        black --check backend/ tests/
        isort --check-only backend/ tests/
        mypy backend/

    - name: Lint JavaScript/TypeScript code
      run: |
        cd web-frontend
        npm run lint
        cd ../mobile-frontend
        npm run lint

  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        python-version: ['3.10']

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-mock pytest-asyncio
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

    - name: Run unit tests
      run: |
        pytest backend/tests/unit --cov=backend/src --cov-report=xml

    - name: Run integration tests
      run: |
        pytest backend/tests/integration --cov=backend/src --cov-append --cov-report=xml
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USERNAME: postgres
        DB_PASSWORD: postgres
        DB_NAME: test_db
        REDIS_HOST: localhost
        REDIS_PORT: 6379

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        fail_ci_if_error: false

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        node-version: ['16.x']

    steps:
    - uses: actions/checkout@v3

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies for web frontend
      run: |
        cd web-frontend
        npm ci

    - name: Run web frontend tests
      run: |
        cd web-frontend
        npm test -- --coverage

    - name: Install dependencies for mobile frontend
      run: |
        cd mobile-frontend
        npm ci

    - name: Run mobile frontend tests
      run: |
        cd mobile-frontend
        npm test -- --coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        flags: frontend
        fail_ci_if_error: false

  build:
    name: Build Artifacts
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push backend Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        push: true
        tags: |
          ghcr.io/${{ github.repository }}/backend:${{ github.sha }}
          ghcr.io/${{ github.repository }}/backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push web frontend Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./web-frontend
        push: true
        tags: |
          ghcr.io/${{ github.repository }}/web-frontend:${{ github.sha }}
          ghcr.io/${{ github.repository }}/web-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.environment }}

    steps:
    - uses: actions/checkout@v3

    - name: Set up Kubernetes tools
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Update kubeconfig
      run: aws eks update-kubeconfig --name quantumalpha-${{ github.event.inputs.environment }} --region us-east-1

    - name: Deploy to Kubernetes
      run: |
        # Update image tags in Kubernetes manifests
        sed -i "s|image: ghcr.io/${{ github.repository }}/backend:.*|image: ghcr.io/${{ github.repository }}/backend:${{ github.sha }}|g" infrastructure/kubernetes/${{ github.event.inputs.environment }}/backend-deployment.yaml
        sed -i "s|image: ghcr.io/${{ github.repository }}/web-frontend:.*|image: ghcr.io/${{ github.repository }}/web-frontend:${{ github.sha }}|g" infrastructure/kubernetes/${{ github.event.inputs.environment }}/web-frontend-deployment.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f infrastructure/kubernetes/${{ github.event.inputs.environment }}/

    - name: Verify deployment
      run: |
        kubectl rollout status deployment/backend -n quantumalpha
        kubectl rollout status deployment/web-frontend -n quantumalpha

