name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Get version from tag
      id: get_version
      run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Generate changelog
      id: changelog
      uses: metcalfc/changelog-generator@v4.0.1
      with:
        myToken: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref_name }}
        body: |
          ## QuantumAlpha ${{ github.ref_name }}
          
          ### What's Changed
          ${{ steps.changelog.outputs.changelog }}
          
          ### Installation
          ```bash
          pip install quantumalpha==${{ steps.get_version.outputs.version }}
          ```
          
          ### Docker Images
          ```bash
          docker pull ghcr.io/abrar2030/quantumalpha/backend:${{ github.ref_name }}
          docker pull ghcr.io/abrar2030/quantumalpha/web-frontend:${{ github.ref_name }}
          ```
          
          ### Documentation
          Full documentation is available at: https://abrar2030.github.io/QuantumAlpha/
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
  
  build-artifacts:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        python-version: ['3.10']
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools twine
    
    - name: Build package
      run: python -m build
    
    - name: Upload wheel to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./dist/quantumalpha-${{ needs.create-release.outputs.version }}-py3-none-any.whl
        asset_name: quantumalpha-${{ needs.create-release.outputs.version }}-py3-none-any.whl
        asset_content_type: application/octet-stream
    
    - name: Upload source distribution to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./dist/quantumalpha-${{ needs.create-release.outputs.version }}.tar.gz
        asset_name: quantumalpha-${{ needs.create-release.outputs.version }}.tar.gz
        asset_content_type: application/gzip
  
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [create-release, build-artifacts]
    if: "!contains(github.ref, 'alpha') && !contains(github.ref, 'beta') && !contains(github.ref, 'rc')"
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools twine
    
    - name: Build package
      run: python -m build
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
  
  publish-docker:
    name: Publish Docker Images
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push backend Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        push: true
        tags: |
          ghcr.io/${{ github.repository }}/backend:${{ github.ref_name }}
          ghcr.io/${{ github.repository }}/backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push web frontend Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./web-frontend
        push: true
        tags: |
          ghcr.io/${{ github.repository }}/web-frontend:${{ github.ref_name }}
          ghcr.io/${{ github.repository }}/web-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

