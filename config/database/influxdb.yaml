# QuantumAlpha InfluxDB Configuration

# Connection Settings
connection:
  url: ${INFLUXDB_URL}
  org: ${INFLUXDB_ORG}
  token: ${INFLUXDB_TOKEN}
  timeout: 30000  # milliseconds

# Buckets
buckets:
  - name: market_data
    description: "Market data time series"
    retention_period: 90d
    shard_group_duration: 1d
  
  - name: market_data_5m
    description: "5-minute downsampled market data"
    retention_period: 180d
    shard_group_duration: 1d
  
  - name: market_data_1h
    description: "1-hour downsampled market data"
    retention_period: 365d
    shard_group_duration: 1d
  
  - name: market_data_1d
    description: "1-day downsampled market data"
    retention_period: 1825d  # 5 years
    shard_group_duration: 7d
  
  - name: technical_indicators
    description: "Technical indicators time series"
    retention_period: 90d
    shard_group_duration: 1d
  
  - name: portfolio_metrics
    description: "Portfolio performance metrics"
    retention_period: 1825d  # 5 years
    shard_group_duration: 7d
  
  - name: system_metrics
    description: "System performance metrics"
    retention_period: 30d
    shard_group_duration: 1d

# Measurements
measurements:
  - name: price
    bucket: market_data
    tags:
      - symbol
      - exchange
      - asset_class
    fields:
      - name: open
        type: float
      - name: high
        type: float
      - name: low
        type: float
      - name: close
        type: float
      - name: volume
        type: integer
      - name: vwap
        type: float
  
  - name: quote
    bucket: market_data
    tags:
      - symbol
      - exchange
    fields:
      - name: bid
        type: float
      - name: ask
        type: float
      - name: bid_size
        type: integer
      - name: ask_size
        type: integer
      - name: spread
        type: float
  
  - name: trade
    bucket: market_data
    tags:
      - symbol
      - exchange
      - trade_condition
    fields:
      - name: price
        type: float
      - name: size
        type: integer
  
  - name: technical_indicator
    bucket: technical_indicators
    tags:
      - symbol
      - indicator
      - parameters
    fields:
      - name: value
        type: float
  
  - name: portfolio_performance
    bucket: portfolio_metrics
    tags:
      - portfolio_id
      - strategy_id
    fields:
      - name: equity
        type: float
      - name: cash
        type: float
      - name: margin
        type: float
      - name: pnl
        type: float
      - name: pnl_percent
        type: float
      - name: drawdown
        type: float
  
  - name: system_performance
    bucket: system_metrics
    tags:
      - service
      - host
      - region
    fields:
      - name: cpu_usage
        type: float
      - name: memory_usage
        type: float
      - name: disk_usage
        type: float
      - name: request_count
        type: integer
      - name: error_count
        type: integer
      - name: latency_ms
        type: integer

# Continuous Queries
continuous_queries:
  - name: downsample_price_5m
    query: >
      from(bucket: "market_data")
        |> range(start: -1h)
        |> filter(fn: (r) => r._measurement == "price")
        |> aggregateWindow(every: 5m, fn: mean, createEmpty: false)
        |> to(bucket: "market_data_5m", org: "quantumalpha")
    every: 5m
  
  - name: downsample_price_1h
    query: >
      from(bucket: "market_data")
        |> range(start: -2h)
        |> filter(fn: (r) => r._measurement == "price")
        |> aggregateWindow(every: 1h, fn: mean, createEmpty: false)
        |> to(bucket: "market_data_1h", org: "quantumalpha")
    every: 1h
  
  - name: downsample_price_1d
    query: >
      from(bucket: "market_data")
        |> range(start: -2d)
        |> filter(fn: (r) => r._measurement == "price")
        |> aggregateWindow(every: 1d, fn: mean, createEmpty: false)
        |> to(bucket: "market_data_1d", org: "quantumalpha")
    every: 1d
  
  - name: calculate_daily_metrics
    query: >
      from(bucket: "portfolio_metrics")
        |> range(start: -2d)
        |> filter(fn: (r) => r._measurement == "portfolio_performance")
        |> aggregateWindow(every: 1d, fn: last, createEmpty: false)
        |> to(bucket: "portfolio_metrics_daily", org: "quantumalpha")
    every: 1d

# Tasks
tasks:
  - name: clean_old_data
    query: >
      option task = {name: "clean_old_data", every: 1d}
      
      delete_old_data = (bucket, measurement, older_than) => {
        from(bucket: bucket)
          |> range(start: 0, stop: older_than)
          |> filter(fn: (r) => r._measurement == measurement)
          |> drop()
      }
      
      delete_old_data(bucket: "market_data", measurement: "trade", older_than: -30d)
      delete_old_data(bucket: "system_metrics", measurement: "system_performance", older_than: -7d)
    every: 1d
  
  - name: compute_volatility
    query: >
      option task = {name: "compute_volatility", every: 1h}
      
      from(bucket: "market_data")
        |> range(start: -30d)
        |> filter(fn: (r) => r._measurement == "price" and r._field == "close")
        |> window(every: 1d)
        |> stddev()
        |> to(
            bucket: "technical_indicators",
            measurement: "volatility_1d",
            org: "quantumalpha"
          )
    every: 1h

# Backup Configuration
backup:
  enabled: true
  schedule: "0 3 * * *"  # 3 AM daily
  retention:
    days: 30
    keep_daily: 7
    keep_weekly: 4
    keep_monthly: 12
  storage:
    type: s3
    bucket: quantumalpha-backups
    prefix: influxdb/
    region: us-east-1

# Monitoring
monitoring:
  enabled: true
  metrics_enabled: true
  http_endpoint: true
  store_metrics: true
  store_logs: true

# Performance Tuning
performance:
  cache_max_memory_size: 1073741824  # 1GB
  cache_snapshot_memory_size: 26214400  # 25MB
  cache_snapshot_write_cold_duration: "10m"
  compact_full_write_cold_duration: "4h"
  max_concurrent_compactions: 0
  max_series_per_database: 1000000
  max_values_per_tag: 100000

